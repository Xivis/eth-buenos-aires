version: "2"

services:
  web:
    restart: always
    build: ./backend
    image: webworkerimage
    expose:
      - "8000"
    links:
      - postgres:postgres
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/static
      - mediadata:/usr/src/app/media
    env_file: .env
    environment:
      DEBUG: 'true'
      VIRTUAL_HOST: 'backend'
    command: /usr/local/bin/gunicorn backend.wsgi:application -w 4 -b 0.0.0.0:8000 --reload --log-level debug
    stdin_open: true
    tty: true
    networks:
      - api-tier
      - back-tier

  node:
    restart: always
    build: ./frontend
    container_name: eth-buenos-aires-node
    command: ["npm", "start"]
    environment:
      VIRTUAL_HOST: 'frontend'
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    expose:
      - "3000"
    stdin_open: true
    tty: true
    networks:
      - front-tier


  nginx:
    restart: always
    build: ./nginx
    container_name: eth-buenos-aires-nginx
    environment:
      REACT_DEFAULT_HOST: 'remove.localhost'
      API_DEFAULT_HOST: 'localhost'
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/sites-enabled:/etc/nginx
      - /var/run/docker.sock:/tmp/docker.sock:ro
    volumes_from:
      - web
      - node
    depends_on:
      - web
      - node
    links:
      - web
      - node
    networks:
      - front-tier
      - api-tier

  postgres:
    restart: always
    image: postgres:latest
    container_name: eth-buenos-aires-postgres
    volumes:
      - pgdata:/var/lib/postgresql/data/
    networks:
      - back-tier

volumes:
  pgdata:
  mediadata:

networks:
  front-tier:
    driver: bridge
  api-tier:
    driver: bridge
  back-tier:
    driver: bridge
